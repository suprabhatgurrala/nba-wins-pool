[project]
name = "nba-wins-pool"
version = "0.0.1"
description = "Web app for displaying standings and analysis for NBA Wins Pool"
readme = "README.md"
license = {text = "AGPL-3.0"}
requires-python = ">=3.12"
dependencies = [
    "fastapi[standard]>=0.115.4",
    "nba_api>=1.10.1",
    "pandas>=2.2.3",
    "requests>=2.32.3",
    "sqlmodel>=0.0.22",
    "asyncpg>=0.29.0",
    "alembic>=1.13.0",
    "greenlet>=3.0.0",
    "sse-starlette>=3.0.2",
    "apscheduler>=3.10.4",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/nba_wins_pool"]

[dependency-groups]
dev = [
    "pre-commit>=4.0.1",
    "ruff>=0.7.3",
    "fastapi-cli>=0.0.5",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.23.0",
    "ipykernel>=6.30.1",
]
model = [
    "beautifulsoup4>=4.13.5",
    "html5lib>=1.1",
    "lxml>=6.0.1",
    "scikit-learn>=1.7.2",
    "tqdm>=4.67.1",
]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
extend-select = ["I"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[project.scripts]
nbawinspool_deploy = "services.deploy:entrypoint"


[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "%(here)s/alembic"


file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]


# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = "utf-8"

# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

[[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the module runner, against the "ruff" module
name = "ruff"
type = "module"
module = "ruff"
options = "check --fix REVISION_SCRIPT_FILENAME"
